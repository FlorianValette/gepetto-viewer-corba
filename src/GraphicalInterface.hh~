//
//  GraphicalObjectOSG.h
//  DynAndGraphics
//
//  Created by Justin Carpentier on 06/02/2014.
//  Copyright (c) 2014 Justin Carpentier. All rights reserved.
//

#ifndef __DynAndGraphics__GraphicalInterface__
#define __DynAndGraphics__GraphicalInterface__

#include "../../SceneViewer/WindowManager.h"
#include "../../SceneViewer/Node.h"
#include "../../SceneViewer/GroupNode.h"
#include "../../SceneViewer/LeafNodeBox.h"
#include "../../SceneViewer/LeafNodeCapsule.h"
#include "../../SceneViewer/LeafNodeCone.h"
#include "../../SceneViewer/LeafNodeCylinder.h"
#include "../../SceneViewer/LeafNodeLine.h"
#include "../../SceneViewer/LeafNodeSphere.h"
#include "../../SceneViewer/macros.h"
#include "../../SceneViewer/configOSG.h"
#include "../../SceneViewer/LeafNodeGround.h"
#include "../../SceneViewer/LeafNodeCollada.h"
#include "../idl/sceneViewer.hh"

namespace Graphics {

   DEF_CLASS_SMART_PTR(GraphicalInterface)


   class GraphicalInterface : public virtual POA_Graphics::sceneViewer
   {
   private:
       std::map<std::string, WindowManagerPtr_t> windowManagers_;
       std::map<std::string, NodePtr_t> nodes_;
       std::map<std::string, GroupNodePtr_t> groupNodes_;

       static osgVector4 getColor(const std::string& colorName);
       static std::string parentName(const std::string& name);
       static VisibilityMode getVisibility(const std::string& visibilityName);
       static WireFrameMode getWire(const std::string& wireName);
       static LightingMode getLight(const std::string& lightName);
       void initParent(const std::string& nodeName, NodePtr_t node);
       void addNode(const std::string& nodeName, NodePtr_t node);
       void addGroup(const std::string& groupName, GroupNodePtr_t group);

   protected:
       /**
        \brief Default constructor
        */
       GraphicalInterface ();

   public:
       /** Static method which create a new box defined by the half_axis vector
        */
       static GraphicalInterfacePtr_t create();

       virtual void createWindow(CORBA::char* windowNameCorba) throw (Error);
       //virtual void createWindow(CORBA::char* name, CORBA::ULong x, CORBA::ULong y, CORBA::ULong width, CORBA::ULong height) throw (Error);

       virtual void createScene(CORBA::char* sceneNameCorba) throw (Error);
       virtual void createSceneWithFloor(CORBA::char* sceneNameCorba) throw (Error);
       virtual void addSceneToWindow(CORBA::char* sceneNameCorba, CORBA::char* windowNameCorba) throw (Error);

       //virtual void addBox(CORBA::char* boxName, CORBA::Float boxSize1, CORBA::Float boxSize2, CORBA::Float boxSize3, CORBA::char* colorName);
       virtual void addBox(CORBA::char* boxNameCorba, CORBA::Float boxSize1, CORBA::Float boxSize2, CORBA::Float boxSize3) throw (Error);

       virtual void addCapsule(CORBA::char* capsuleNameCorba, CORBA::Float radius, CORBA::Float height) throw (Error);
       //virtual void addCapsule(CORBA::char* capsuleName, CORBA::Float radius, CORBA::Float height, CORBA::char* colorName);

       virtual void addMesh(CORBA::char* meshNameCorba, CORBA::char* meshPathCorba) throw (Error);

       virtual void addCone(CORBA::char* coneNameCorba, CORBA::Float radius, CORBA::Float height) throw (Error);
       //virtual void addCone(CORBA::char* coneName, CORBA::Float radius, CORBA::Float height, CORBA::char* colorName);

       virtual void addCylinder(CORBA::char* cylinderNameCorba, CORBA::Float radius, CORBA::Float height) throw (Error);
       //virtual void addCylinder(CORBA::char* cylinderName, CORBA::Float radius, CORBA::Float height, CORBA::char* colorName);

       virtual void addSphere(CORBA::char* sphereNameCorba, CORBA::Float radius) throw (Error);
       //virtual void addSphere(CORBA::char* sphereName, CORBA::Float radius, CORBA::char* colorName);

       virtual void createGroup(CORBA::char* groupNameCorba) throw (Error);
       virtual CORBA::boolean addToGroup(CORBA::char* nodeNameCorba, CORBA::char* groupNameCorba) throw (Error);

       virtual CORBA::boolean applyConfiguration(CORBA::char* nodeNameCorba, CORBA::Float configuration) throw (Error);

       virtual CORBA::boolean setVisibility(CORBA::char* nodeNameCorba, CORBA::char* visibilityModeCorba) throw (Error);
       virtual CORBA::boolean setWireFrameMode(CORBA::char* nodeNameCorba, CORBA::char* wireFrameModeCorba) throw (Error);
       virtual CORBA::boolean setLightingMode(CORBA::char* nodeNameCorba, CORBA::char* lightingModeCorba) throw (Error);

   };

} /* namespace Graphics */

#endif /* defined(__DynAndGraphics__GraphicalInterface__) */
