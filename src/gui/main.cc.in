#include <QApplication>
#include <QSettings>
#include <QCommonStyle>
#include <QProcessEnvironment>
#include <QSplashScreen>
#include <QIcon>

#include <QItemSelection>

#include "gepetto/gui/safeapplication.hh"
#include "gepetto/gui/mainwindow.hh"
#include "gepetto/gui/dialog/pluginmanagerdialog.hh"
#include "gepetto/gui/settings.hh"

using namespace gepetto::gui;

Q_DECLARE_METATYPE(QItemSelection)

void setupApplication ()
{
  QCoreApplication::setOrganizationName("gepetto-gui");
  QCoreApplication::setOrganizationDomain("https://github.com/jmirabel/gepetto-viewer-corba");
  QCoreApplication::setApplicationName("gepetto-gui");
  QCoreApplication::setApplicationVersion("@PROJECT_VERSION@");
  
  QStringList theme_paths = QIcon::themeSearchPaths();
  if (!theme_paths.contains("/usr/local/share/icons/")) {
    theme_paths.prepend("/usr/local/share/icons/");
    QIcon::setThemeSearchPaths(theme_paths);
  }
  QIcon::setThemeName("oxygen");

  qRegisterMetaType<std::string>("std::string");
  qRegisterMetaType<QItemSelection>("QItemSelection");
}

int main(int argc, char *argv[])
{
  QApplication::setAttribute(Qt::AA_X11InitThreads);

  SafeApplication a(argc, argv);
  a.setStyle(new QCommonStyle);
  QPixmap pixmap(":/img/gepetto.png");
  a.setWindowIcon(pixmap);

  setupApplication();

  Settings settings ("@CMAKE_INSTALL_PREFIX@");
  settings.setupPaths ();
  switch (settings.fromArgv (argc, argv)) {
    case 0:
      break;
    case 1:
      return 0;
    case 2:
      return 1;
    default:
      qDebug () << "Settings.fromArgv returned unknow error code";
      break;
  }
  settings.fromFiles ();

  QSplashScreen splash(pixmap);
  splash.show();
  a.processEvents ();

  MainWindow w (&settings);
  w.setWindowIcon (pixmap);
  settings.setMainWindow (&w);
  settings.initPlugins ();
  w.connect (&a, SIGNAL (log(QString)), SLOT (logError(const QString&)));
  w.show();
  splash.finish(&w);
  return a.exec();
}
